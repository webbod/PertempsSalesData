@using Pertemps.Models.BusinessModels;
@using Pertemps.Common.Enumerations;
@model Pertemps.Web.Models.SalesSummaryViewModel
@{
    ViewData["Title"] = "Index";
}

<h1>🌍 @Model.Geography Sales Summary</h1>
<h2><a href="/Analytics/SalesData/ByPeriod/">@Model.Period</a></h2>
<h3>For @Model.DivisionCaption - @Model.SalesChannelCaption - @Model.OrderPriorityCaption </h3>

<section class="pieCharts">
    <div class="pieChart-container">
        @{ RenderPie(Model.DivisionData, "DivisionData"); }
    </div>
    <div class="pieChart-container">
        @{ RenderPie(Model.SalesChannelData, "SalesChannel"); }
    </div>
    <div class="pieChart-container">
        @{ RenderPie(Model.OrderPriorityData, "OrderPriority"); }
    </div>
</section>

<section>
    <h4>By Division @{ RenderShowAll(DatabaseField.ItemType, Model.QueryParams.ItemType.ToString()); } </h4>
    @{ RenderTable(Model.DivisionData, "Category", DatabaseField.ItemType); }
</section>
<section>
    <h4>By Channel  @{ RenderShowAll(DatabaseField.SalesChannel, Model.QueryParams.SalesChannel.ToString()); } </h4>
    @{ RenderTable(Model.SalesChannelData, "Category", DatabaseField.SalesChannel); }
</section>
<section>
    <h4>By Order Priority  @{ RenderShowAll(DatabaseField.OrderPriority, Model.QueryParams.OrderPriority.ToString()); } </h4>
    @{ RenderTable(Model.OrderPriorityData, "Category", DatabaseField.OrderPriority); }
</section>

<section>
    <h4>Daily </h4>
    @{ RenderTable(Model.DailyData, "Date", DatabaseField.OrderPriority, filterable: false); }
</section>

@{
    void RenderShowAll(DatabaseField section, string currentFilterValue)
    {
        if (currentFilterValue != "Undefined")
        {
            <a href="@Model.BuildURL(section, "All")" class="showAll">Show all</a>
        }
    }

    void RenderPie(List<SalesSummaryData> items, string pieName)
    {
        pieName = items.Count() == 1 ? GetSegmentName(items.First().Category) : pieName;

        <div id="@pieName" class="pie @pieName">
            @{ 
                if (items.Count() > 1) 
                { 
                    var runningTotal = 0m;
                    // this is profit for now
                    foreach (var item in items.OrderByDescending(i => i.TotalProfitPercentage))
                    {
                        var className = GetSegmentName(item.Category);

                        <div class="pie__segment @className" style="--offset: @runningTotal; --value: @item.TotalProfitPercentage ; --over50: @(item.TotalProfitPercentage > 50 ? 1 : 0)" 
                        data-start="@runningTotal" data-end="@(item.TotalProfitPercentage + runningTotal)"></div>

                        runningTotal += item.TotalProfitPercentage;
                    }
                }
            }
        </div>
    }

    string GetSegmentName(string value) {
        return $"segment__{value.Replace(' ', '_')}";
    }

    void RenderTable(List<SalesSummaryData> items, string caption, DatabaseField section, bool filterable = true)
    {

        <table>
            <thead>
                <tr>
                    <th>@caption</th>
                    <th class="numeric">Units Sold</th>
                    <th class="numeric">Total Cost</th>
                    <th class="numeric">Total Revenue</th>
                    <th class="numeric">Total Profit</th>
                </tr>
            </thead>

            @foreach (var item in items)
            {
                <tr>
                    <td>
                        @if (filterable)
                        {
                            // &#xFE0E; stopes chrome rendering it as an emoji
                            <span class="pie__chip @GetSegmentName(item.Category)">⚫&#xFE0E;</span><a href="@Model.BuildURL(section, item.Category)">@item.Category</a>
                        }
                        else
                        {
                            @item.Category
                        }
                    </td>
                    <td class="numeric">@item.UnitsSold.ToString("###,###,###")</td>
                    <td class="numeric">@item.TotalCost.ToString("£###,###,###.00")</td>
                    <td class="numeric">@item.TotalRevenue.ToString("£###,###,###.00")</td>
                    <td class="numeric">@item.TotalProfit.ToString("£###,###,###.00")</td>
                </tr>
            }

        </table>

    }
}

<script>

    bindPieCharts("#DivisionData");
    bindPieCharts("#SalesChannel");
    bindPieCharts("#OrderPriority");

    function bindPieCharts(name) {
        var pie = document.querySelector(name)
        pie.addEventListener('mousemove', highlightSegment, true);
        pie.addEventListener('mouseout', clearHighlight, true);
    }

    function getSegments(e) {
        return e.srcElement.parentElement.children;
    }

    function clearHighlight(e) {
        var segments = getSegments(e);
        for(var i = 0; i < segments.length; i++){
            var item = segments[i];
            item.classList.remove("hovered");
        }
    }

    function highlightSegment(e) {
        event.stopPropagation();
        event.preventDefault();

        var pie = e.srcElement.parentElement;

        // e = Mouse click event.
        var rect = pie.getBoundingClientRect();
        var x = e.x - rect.left; //x position within the element.
        var y = e.y - rect.top;  //y position within the element.
        var cx = (rect.right-rect.left)/2;
        var cy = (rect.bottom-rect.top)/2;

        var o = y-cy;
        var a = x-cx;

        var angle;

        if(a != 0){
                angle = Math.atan(o / a) * 360 / (2 * Math.PI);
            }
        else {
                angle = o < 0 ? 90 : 180
        }

        angle += a < 0 ? 270 : 90;

        var percentage = angle/360*100;

        var segments = getSegments(e);

        for(var i = 0; i < segments.length; i++){

            var item = segments[i];

            if (percentage >= item.getAttribute("data-start") && percentage < item.getAttribute("data-end")) {
                    item.classList.add("hovered");
            }
            else {
                    item.classList.remove("hovered");
            }
        }
    }
</script>
